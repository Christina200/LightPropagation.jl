var documenterSearchIndex = {"docs":
[{"location":"getting-started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting-started/#Installation-requirements","page":"Getting Started","title":"Installation requirements","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"LightPropagation is tested on MacOS and Linux, but it should be also possible to use it on Windows since it is written exclusively in Julia and it only depends on registered Julia packages.","category":"page"},{"location":"getting-started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"The easiest way to install julia is by downloading julia from the offical site and following the platform specific installations. ","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"Launch Julia and open Julia's package manager by typing ] in the REPL. You should see the command line change from julia> to (@v1.5) pkg>. (The @v1.x will display your current version) Add the package as shown in the code block below. Once the package has cloned, backspace to bring back the julia> in your REPL and type using LightPropagation as shown below.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"(@v1.5) pkg> add \"https://github.com/heltonmc/LightPropagation.git\"\n\njulia> using LightPropagation\n","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"For further information about how to install and manage Julia packages, see the Pkg documentation.","category":"page"},{"location":"getting-started/#Forward-Simulation","page":"Getting Started","title":"Forward Simulation","text":"","category":"section"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"To view a functions inputs and methods type ? in the REPL and then the name of the function. Let's first look at simulating a temporal point spread function (TPSF) for a semi-infinite medium.","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"help?> TPSF_DA_semiinf_refl\nsearch: TPSF_DA_semiinf_refl\n\n  TPSF_DA_semiinf_refl(t, β::Array{Float64,1}, ρ::Float64, ndet::Float64, nmed::Float64)\n\n  Compute the time-domain reflectance from a semi-infinite medium. \n\n  Arguments\n  ≡≡≡≡≡≡≡≡≡≡≡\n\n    •    t: the time vector (ns). \n\n    •    β::Array{Float64,1}: the optical properties μa, μs' (cm⁻¹)\n\n    •    ρ::Float64: the source detector separation (cm⁻¹)\n\n    •    ndet::Float64: the boundary's index of refraction (air or\n        detector)\n\n    •    nmed::Float64: the sample medium's index of refraction\n\n  Examples\n  ≡≡≡≡≡≡≡≡≡≡\n\n  julia> TPSF_DA_semiinf_refl(0:1:5, [0.1,10.0], 1.0, 1.0, 1.0)\n  6-element Array{Float64,1}:\n   0.0\n   0.0001440103022493725\n   1.446739954231315e-6\n   2.7354735244571076e-8\n   6.794070985483474e-10\n   1.9657536202689858e-11","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"This is a convenient way to see a brief description of the function and its arguments. Let's call this function and set it equal to a variable called TPSF. We can also plot this with the below example. ","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"\njulia> using Plots\n\njulia> t = 0:0.01:10\njulia> TPSF = TPSF_DA_semiinf_refl(t, [0.1,10.0], 1.0, 1.0, 1.0)\njulia> ind = TPSF .> 0\n\njulia> plot(t[ind], TPSF[ind], yscale=:log10, lw = 2, ylabel=\"Counts\", xlabel=\"time (ns)\", label=\"TPSF\")\n","category":"page"},{"location":"getting-started/","page":"Getting Started","title":"Getting Started","text":"There are several other forward models in different geometries. The naming scheme of the forward models follow a physicalquantity_approximation_geometry_measurementtype scheme. So something that simulates the reflected temporal point spread function using the diffusion approximation for a semi-infinite geometry would be TPSF_DA_semiinf_refl . Try simulating the TPSF for a slab and parralelepiped geometry by using TPSF_DA_slab_refl and TPSF_DA_paralpip_refl functions.","category":"page"},{"location":"DA_slab_semiinfgeom/#Solutions-of-the-Diffusion-Equation-for-the-Slab-Geometry","page":"Slab","title":"Solutions of the Diffusion Equation for the Slab Geometry","text":"","category":"section"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"The following describes the light propagation through turbid media bounded by parallel planes. ","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"The described derivations follow the methods from Contini 1997.[1]","category":"page"},{"location":"DA_slab_semiinfgeom/#Diffusion-Equation","page":"Slab","title":"Diffusion Equation","text":"","category":"section"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"(frac1nufracpartial partial t - Dnabla^2 + mu_a)Phi(vecr t) = Q(vecr t)","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"Where Q(vecr t) is the isotropic source term and D is the diffusion coefficient, D = frac13mu_s","category":"page"},{"location":"DA_slab_semiinfgeom/#Solution-of-the-Diffusion-Equation-for-homogeneous-media-in-a-slab-geometry","page":"Slab","title":"Solution of the Diffusion Equation for homogeneous media in a slab geometry","text":"","category":"section"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"The diffusion equation is a partial-differential equation that will require boundary conditions to solve for a specific geometry. Here we will utilize the extrapolated boundary conditions as described in Contini 1997.[1] that assumes that the flux is equal to 0 on an extrapolated surface at a distance of (2AD). After the boundary conditions have been determined, utilizng the method of images will allow us to reconstruct the fluence inside the medium. ","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"Utilizing Equation 33 from Contini 1997,[1] the time-dependent Green's function for the fluence rate at (vecr) can be described by:","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"Phi(vecr t) = fracnu(4pi D nu t)^frac32\nexp(- fracrho ^24 D nu t - mu_a nu t) times\nsum_m=-infty^m=+infty exp(-frac(z-z_m^+)^24 D nu t) - \nexp(-frac(z-z_m^-)^24 D nu t)","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"Where:","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"z_m^+ = 2m(s+ 2z_e)\nz_m^- = 2m(s +2z_e) - 2z_e - z_s\nm = 0 pm 1 pm 2  pm infty","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"To obtain solutions for the time-dependent transmittance and reflectance we can utilize Fick's law where:","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"R (rho t) = Dfracpartialpartial z Phi(rho z = 0 t)","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"and ","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"T (rho t) = - Dfracpartialpartial z Phi(rho z = s t)","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"Which yields Equation 36 from Contini 1997[1] for the time-dependent reflectance on the surface:","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"R(rho t) = - fracexp(-mu_a nu t - fracrho^24 D nu t)2(4pi D nu)^frac32t^frac52\ntimes\nsum_m=-infty^m=+infty z_3mexp(-fracz_3m^24 D nu t) - \nz_4mexp(-fracz_4m^24 D nu t)","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"and Equation 39 from Contini 1997.[1] for the time-dependent transmittance on at the distance z=s where s is the thickness of the slab:","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"T(rho t) = fracexp(-mu_a nu t - fracrho^24 D nu t)2(4pi D nu)^frac32t^frac52\ntimes\nsum_m=-infty^m=+infty z_1mexp(-fracz_1m^24 D nu t) - \nz_2mexp(-fracz_2m^24 D nu t)","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"Where:","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"z_1m = s(1-2m) - 4mz_e - z_o\nz_2m = s(1-2m) - (4m-2)z_e - z_o\nz_3m = -2ms - 4mz_e - z_o\nz_4m = -2ms - (4m-2)z_e - z_o","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"To obtain solution","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"λ0 = 1 #doesn't matter since everything is normalized to λ0\nk0 = 2π/λ0\nkin = 3k0\nθ_i = 0.0 #incident wave is left->right\npw = PlaneWave(θ_i)\nN = 260\nP = 10\nshapes = [rounded_star(0.1λ0, 0.05λ0, 5, N)]\nids = [1] # the particle at centers[1,:] has the parametrization shapes[ids[1]]\ncenters = [0.0 0.0] # our particle is centered at the origin\nφs = [0.0] #zero rotation angle\nsp = ScatteringProblem(shapes, ids, centers, φs)","category":"page"},{"location":"DA_slab_semiinfgeom/","page":"Slab","title":"Slab","text":"[1]: Daniele Contini, Fabrizio Martelli, and Giovanni Zaccanti, \"Photon migration through a turbid slab described by a model based on diffusion approximation. I. Theory,\" Appl. Opt. 36, 4587-4599 (1997) ","category":"page"},{"location":"#LightPropagation.jl","page":"Home","title":"LightPropagation.jl","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LighPropagation provides a set of tools for modeling light transport in turbid media written in the Julia programming language. The main motivation behind the development of this library is to provide an easy-to-use, open-source framework that highlights and standardizes prominent analytical techniques to model light transport in complex heterogenous structures. The radiative transport equation (RTE) and its approximations to model propagation of particles in random media are frequently applied in astrophysics, nuclear physics, biophotonics, heat transfer, computer graphics, and climate research. This package focuses on their use in biomedical optics with a focus on performance and standardization.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The library has two main components split into (a) the forward modelling of light transport and (b) the associated inverse problem. Currently, photon migration in the continuous-wave (CW), frequency-domain (FD)and time-domain (TD) under the Diffusion Approximation (DA) are described in homogenous media for semi-infinite, slab, and parallelepiped geometries. Laterally infinite multi-layered solutions are also described. Least squares fitting based on the Levenberg-Marquardt algorithm are also available to fit time-resolved measurements after convolution with the Instrument Response Function (IRF). ","category":"page"},{"location":"#Julia-educational-resources","page":"Home","title":"Julia educational resources","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A basic knowledge of the Julia programming language is needed to use the LightPropagation package. Here, one can find a list of resources to get started with this programming language.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Official webpage docs.julialang.org\nOfficial list of learning resources julialang.org/learning\nOfficial YouTubechannel","category":"page"},{"location":"#Manual","page":"Home","title":"Manual","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n  \"DA_slab_semiinfgeom.md\",\n  ]","category":"page"}]
}
